#ifndef ANUBIS_GRAPHICS_TEXT_RENDERER_HPP
#define ANUBIS_GRAPHICS_TEXT_RENDERER_HPP

#include "Colour.hpp"
#include "Texture2D.hpp"
#include "ShaderProgram.hpp"

#include "../Common.hpp"
#include "../Math.hpp"

namespace Anubis
{
  namespace Graphics
  {
    class TextRenderer
    {
      /** The number of floating point values used to describe a face. Since
       * the texture coordinates is saved with the 3D coordinates, that is:
       * [x, y, z, w] [s, t], that is a total of 6 floats. */
      static const size_t kFloatsPerVert = 6;

      /** The number of vertices required per glyph face. Since quads are used
       * that is 4. */
      static const size_t kVertsPerGlyph = 4;

      /** The number of indices required per glyph face. Since triangles are
       * used to make quads, that is 6 per face. */
      static const size_t kIndicesPerGlyph = 6;

      /** The vertex shader code*/
      static const std::string kVertexShaderCode;

      /** The fragment shader code. */
      static const std::string kFragmentShaderCode;



      /** A structure that contains the required information for rendering a
       * particular code point. */
      class Glyph;

      /** The texture atlas used by the text renderer to cache the bitmaps of
       * the glyphs. */
      class GlyphAtlas;

      /** The number of glyphs that is cached per draw call. */
      const size_t kGlyphCacheLen;

      /** The instance of the glyph atlas. */
      std::unique_ptr<GlyphAtlas> fGlyphAtlas;

      /** The texture used for rendering the atlas. */
      std::unique_ptr<Texture2D> fTexture;

      /** The shader used for rendering the glyphs. */
      std::unique_ptr<ShaderProgram> fShaderProgram;


      uint32_t fIndexBuffID;
      uint32_t fVertBuffID;

      /** The Vertexes and Texture coordinates used for each point. Each vertex
       * is stored with it's texture coordinates, i.e. the  memory for "vertex"
       * is packed as:
       *
       *   4 Floats          | 2 Floats    |
       *  :------------------|:-----------:|
       *  Vertex (x,y,z,w)   | Tex Coords  |
       */
      std::vector<float> fVertsAndTexCoords;

      /** The object storing the platform specific information of the class. */
      struct Data;

      /** A reference to the platform specific information. */
      //std::unique_ptr<Data> fData;

      void initCache();

    public:

      class Font;

      /*********************************************************************//**
       * Create a text renderer object with the specified cache length. Since
       * the text renderer tries to batch draw calls, the longer the cache, the
       * less draw calls will be invoked. However a cache length that is too
       * long will just waste memory.
       *
       * @param cacheLen  The cache length of polygons corresponding to the
       *                  glyph being rendered.
       ************************************************************************/
      TextRenderer(size_t cacheLen = 256);

      ~TextRenderer();

      /*********************************************************************//**
       * Add the font at the specified path to the text renderer and return a
       * pointer to the created font. Note the user must not delete manually
       * delete this pointer since it is managed by the TextRenderer object.
       *
       * @param path  The path to the font to be loaded.
       * @param uuid  The UUID to uniquely identify the font by. If none is
       *              provided, the autogenerated one is used.
       * @return      The pointer to the created font. Pass this pointer to the
       *              drawText() function.
       ************************************************************************/
      Font * addFont(const std::string & path,
                     const Common::UUID & uuid = Common::UUID());

      /*********************************************************************//**
       * Draw a UTF8 unicode string in world space.
       *
       * @param text    The UTF8 string to draw.
       * @param font    The font to use for drawing.
       * @param height  The height to render the glyph.
       * @param colour  The colour of the string.
       * @param trans   The world transformation of the text.
       ************************************************************************/
      void drawText(const std::string & text, const Font * font, float height,
                    const Colour & colour, const Math::Matrix4f & trans);


      void drawTextSimple(const std::string & text, Font *font,
                          size_t height, const Colour & colour,
                          const Math::Matrix4f & trans);
    };
  }
}


#endif /* ANUBIS_GRAPHICS_TEXT_RENDERER_HPP */
